{"version":3,"sources":["logo.svg","components/timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","changePlayer","e","countForWhite","state","setInterval","Math","trunc","totalSeconds","white","console","log","key","gameStarted","setWhoIsPlaying","target","innerText","timerChangerHandler","dataset","color","type","value","length","whiteData","hours","setDataWatch","dataWatch","minutes","seconds","black","setWhiteData","blackData","setBlackData","addPrefixToInput","originalInput","dataSetColor","dataSetType","modifiedinput","split","slice","join","useState","setGameStarted","whoIsPlaying","setTotalSeconds","id","onKeyDown","tabIndex","className","onChange","placeholder","min","max","data-color","data-type","onClick","style","opacity","cursor","count","hr","parseInt","mn","sc","countWhite","countBlack","whiteTotalSeconds","blackTotalSeconds","action","name","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98b9840c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from 'react';\nimport './timer.scss';\n\nconst Timer = (props) => {\n  const changePlayer = (e) => {\n    const countForWhite = (state) => {\n      if (state) {\n        setInterval(() => {\n          if (Math.trunc(totalSeconds.white) === totalSeconds.white) {\n            console.log('no hours');\n          }\n        }, 1000);\n      }\n    };\n\n    const countForBlack = (state) => {};\n    if (e.key === 'w' && gameStarted) {\n      setWhoIsPlaying('black');\n      countForWhite(true);\n    } else if (e.key === 'b' && gameStarted) {\n      setWhoIsPlaying('white');\n      countForWhite(false);\n    } else if (e.target.innerText === 'W' && gameStarted) {\n      setWhoIsPlaying('black');\n      console.log(totalSeconds.white);\n    } else if (e.target.innerText === 'B' && gameStarted) {\n      setWhoIsPlaying('white');\n    }\n  };\n\n  const startCountDown = () => {\n    if (!gameStarted) {\n      setGameStarted(true);\n      setWhoIsPlaying('white');\n    }\n\n    let count = {\n      white: {\n        hr:\n          parseInt(whiteData.hours) > 0 ? parseInt(whiteData.hours * 3600) : 0,\n        mn:\n          parseInt(whiteData.minutes) > 0\n            ? parseInt(whiteData.minutes * 60)\n            : 0,\n        sc: parseInt(whiteData.seconds) > 0 ? parseInt(whiteData.seconds) : 0,\n      },\n      black: {\n        hr:\n          parseInt(blackData.hours) > 0 ? parseInt(blackData.hours * 3600) : 0,\n        mn:\n          parseInt(blackData.minutes) > 0\n            ? parseInt(blackData.minutes * 60)\n            : 0,\n        sc: parseInt(blackData.seconds) > 0 ? parseInt(blackData.seconds) : 0,\n      },\n    };\n\n    let countWhite = count.white;\n    let countBlack = count.black;\n\n    let whiteTotalSeconds = countWhite.hr + countWhite.mn + countWhite.sc;\n    let blackTotalSeconds = countBlack.hr + countBlack.mn + countBlack.sc;\n\n    setTotalSeconds({\n      ...totalSeconds,\n      white: whiteTotalSeconds,\n      black: blackTotalSeconds,\n    });\n  };\n\n  const timerChangerHandler = (e) => {\n    let target = e.target;\n    if (target.dataset.color === 'white') {\n      if (target.dataset.type === 'hr') {\n        if (target.value.length <= 2) {\n          whiteData.hours.length < target.value.length\n            ? setDataWatch({ ...dataWatch, white: true })\n            : whiteData.minutes.length > 0 || whiteData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setWhiteData({ ...whiteData, hours: `${target.value}` });\n        }\n      } else if (target.dataset.type === 'mn') {\n        if (target.value.length <= 2) {\n          whiteData.minutes.length < target.value.length\n            ? setDataWatch({ ...dataWatch, white: true })\n            : whiteData.hours.length > 0 || whiteData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setWhiteData({ ...whiteData, minutes: `${target.value}` });\n        }\n      } else {\n        if (target.value.length <= 2) {\n          whiteData.seconds.length < target.value.length\n            ? setDataWatch({ ...dataWatch, white: true })\n            : whiteData.hours.length > 0 || whiteData.minutes.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setWhiteData({ ...whiteData, seconds: `${target.value}` });\n        }\n      }\n    } else if (target.dataset.color === 'black') {\n      if (target.dataset.type === 'hr') {\n        if (target.value.length <= 2) {\n          blackData.hours.length < target.value.length\n            ? setDataWatch({ ...dataWatch, black: true })\n            : blackData.minutes.length > 0 || blackData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setBlackData({ ...blackData, hours: `${target.value}` });\n        }\n      } else if (target.dataset.type === 'mn') {\n        if (target.value.length <= 2) {\n          blackData.minutes.length < target.value.length\n            ? setDataWatch({ ...dataWatch, black: true })\n            : blackData.hours.length > 0 || blackData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setBlackData({ ...blackData, minutes: `${target.value}` });\n        }\n      } else {\n        if (target.value.length <= 2) {\n          blackData.seconds.length < target.value.length\n            ? setDataWatch({ ...dataWatch, black: true })\n            : blackData.hours.length > 0 || blackData.minutes.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setBlackData({ ...blackData, seconds: `${target.value}` });\n        }\n      }\n    }\n\n    addPrefixToInput(target);\n  };\n\n  const resetTimer = () => {\n    setWhiteData({ hours: ``, minutes: ``, seconds: `` });\n    setBlackData({ hours: ``, minutes: ``, seconds: `` });\n  };\n\n  const addPrefixToInput = (e) => {\n    let originalInput = e.value;\n    let dataSetColor = e.dataset.color;\n    let dataSetType = e.dataset.type;\n    // console.table([e.value.length, originalInput]);\n\n    if (e.value.length <= 2) {\n      dataSetColor == 'black'\n        ? dataSetType == 'hr'\n          ? setBlackData({ ...blackData, hours: `0${originalInput}` })\n          : dataSetType == 'mn'\n          ? setBlackData({ ...blackData, minutes: `0${originalInput}` })\n          : setBlackData({ ...blackData, seconds: `0${originalInput}` })\n        : dataSetType == 'hr'\n        ? setWhiteData({ ...whiteData, hours: `0${originalInput}` })\n        : dataSetType == 'mn'\n        ? setWhiteData({ ...whiteData, minutes: `0${originalInput}` })\n        : setWhiteData({ ...whiteData, seconds: `0${originalInput}` });\n    } else if (e.value.length === 3) {\n      let modifiedinput = originalInput.split('').slice(1).join('');\n\n      dataSetColor == 'black'\n        ? dataSetType == 'hr'\n          ? setBlackData({ ...blackData, hours: `${modifiedinput}` })\n          : dataSetType == 'mn'\n          ? setBlackData({ ...blackData, minutes: `${modifiedinput}` })\n          : setBlackData({ ...blackData, seconds: `${modifiedinput}` })\n        : dataSetType == 'hr'\n        ? setWhiteData({ ...whiteData, hours: `${modifiedinput}` })\n        : dataSetType == 'mn'\n        ? setWhiteData({ ...whiteData, minutes: `${modifiedinput}` })\n        : setWhiteData({ ...whiteData, seconds: `${modifiedinput}` });\n    }\n  };\n\n  let [whiteData, setWhiteData] = useState({\n    hours: '',\n    minutes: '',\n    seconds: '',\n    totalSeconds: 0,\n  });\n  let [blackData, setBlackData] = useState({\n    hours: '',\n    minutes: '',\n    seconds: '',\n    totalSeconds: 0,\n  });\n  let [currentlyPlaying, setCurrentlyPlaying] = useState(false);\n  let [gameStarted, setGameStarted] = useState(false);\n  let [gameSet, setGameSet] = useState(false);\n  let [dataWatch, setDataWatch] = useState({\n    white: false,\n    black: false,\n  });\n  let [whoIsPlaying, setWhoIsPlaying] = useState('');\n  let [totalSeconds, setTotalSeconds] = useState({\n    white: 0,\n    black: 0,\n  });\n\n  return (\n    <div id='app' onKeyDown={changePlayer} tabIndex={0}>\n      <div className='desktop'>\n        <header>\n          <div className='logo'>chessly</div>\n          <p>Countdown timer for chess</p>\n        </header>\n        <section className='content'>\n          <div className='timer'>\n            <div className='timerOne'>\n              <div className='label'>white</div>\n              {/* <div className='editTimer'></div> */}\n              <form>\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='white'\n                  data-type='hr'\n                  value={whiteData.hours}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='white'\n                  data-type='mn'\n                  value={whiteData.minutes}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='white'\n                  data-type='sc'\n                  value={whiteData.seconds}\n                />\n              </form>\n            </div>\n\n            <div className='timerTwo'>\n              <div className='label'>Black</div>\n              <div className='editTimer'></div>\n              <form>\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='black'\n                  data-type='hr'\n                  value={blackData.hours}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='black'\n                  data-type='mn'\n                  value={blackData.minutes}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='black'\n                  data-type='sc'\n                  value={blackData.seconds}\n                />\n              </form>\n            </div>\n          </div>\n\n          <div className='controls'>\n            <div className='switches'>\n              <div\n                onClick={changePlayer}\n                className='white'\n                style={{ opacity: `${whoIsPlaying === 'white' ? '1' : '0.3'}` }}\n              >\n                W\n              </div>\n              <div\n                onClick={changePlayer}\n                className='black'\n                style={{ opacity: `${whoIsPlaying === 'black' ? '1' : '0.3'}` }}\n              >\n                B\n              </div>\n            </div>\n            <div\n              className={\n                dataWatch.white && dataWatch.black ? 'start' : 'startDull'\n              }\n              style={{\n                opacity: `${dataWatch.white && dataWatch.black ? '1' : '0.3'}`,\n                cursor: `${\n                  dataWatch.white && dataWatch.black ? 'pointer' : 'not-allowed'\n                }`,\n              }}\n              onClick={\n                dataWatch.white && dataWatch.black ? startCountDown : () => {}\n              }\n            >\n              Start Game\n            </div>\n            <div id='breaker'></div>\n            {/* This div helps create a break between the div before and after */}\n            <div\n              className={`${\n                dataWatch.white || dataWatch.white ? 'reset' : 'resetDull'\n              }`}\n              style={{\n                opacity: `${\n                  whiteData.hours\n                    ? '1'\n                    : whiteData.minutes\n                    ? '1'\n                    : whiteData.seconds\n                    ? '1'\n                    : '0.3'\n                }`,\n                cursor: `${\n                  whiteData.hours\n                    ? 'pointer'\n                    : whiteData.minutes\n                    ? 'pointer'\n                    : whiteData.seconds\n                    ? 'pointer'\n                    : 'not-allowed'\n                }`,\n              }}\n              onClick={resetTimer}\n            >\n              Reset\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <div className='mobile'>\n        <div className='blackSide'>\n          <div className='mobileBlackSwitch'>B</div>\n          <div className='timerDetails'>\n            <form action=''>\n              <input type='tel' name='' id='' placeholder='00' />:\n              <input type='tel' name='' id='' placeholder='00' />:\n              <input type='tel' name='' id='' placeholder='00' />\n            </form>\n          </div>\n        </div>\n        <div className='controls'></div>\n        <div className='whiteSide'>\n          <div className='mobileWhiteSwitch'>W</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Timer from \"./components/timer\";\n\nfunction App() {\n  return <Timer />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}