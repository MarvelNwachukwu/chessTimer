[{"/Users/2017pro/Documents/chess-timer/src/components/timer.jsx":"1","/Users/2017pro/Documents/chess-timer/src/reportWebVitals.js":"2","/Users/2017pro/Documents/chess-timer/src/App.js":"3","/Users/2017pro/Documents/chess-timer/src/index.js":"4"},{"size":12732,"mtime":1610460155083,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1609083263407,"results":"7","hashOfConfig":"6"},{"size":152,"mtime":1609085220233,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1609083263406,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"60umsr",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/2017pro/Documents/chess-timer/src/components/timer.jsx",["19","20","21","22","23","24","25","26","27","28","29","30","31","32","33"],"import { useState } from 'react';\nimport './timer.scss';\n\nconst Timer = (props) => {\n  const changePlayer = (e) => {\n    const countForWhite = (state) => {\n      if (state) {\n        setInterval(() => {\n          if (Math.trunc(totalSeconds.white) === totalSeconds.white) {\n            console.log('no hours');\n          }\n        }, 1000);\n      }\n    };\n\n    const countForBlack = (state) => {};\n    if (e.key === 'w' && gameStarted) {\n      setWhoIsPlaying('black');\n      countForWhite(true);\n    } else if (e.key === 'b' && gameStarted) {\n      setWhoIsPlaying('white');\n      countForWhite(false);\n    } else if (e.target.innerText === 'W' && gameStarted) {\n      setWhoIsPlaying('black');\n      console.log(totalSeconds.white);\n    } else if (e.target.innerText === 'B' && gameStarted) {\n      setWhoIsPlaying('white');\n    }\n  };\n\n  const startCountDown = () => {\n    if (!gameStarted) {\n      setGameStarted(true);\n      setWhoIsPlaying('white');\n    }\n\n    let count = {\n      white: {\n        hr:\n          parseInt(whiteData.hours) > 0 ? parseInt(whiteData.hours * 3600) : 0,\n        mn:\n          parseInt(whiteData.minutes) > 0\n            ? parseInt(whiteData.minutes * 60)\n            : 0,\n        sc: parseInt(whiteData.seconds) > 0 ? parseInt(whiteData.seconds) : 0,\n      },\n      black: {\n        hr:\n          parseInt(blackData.hours) > 0 ? parseInt(blackData.hours * 3600) : 0,\n        mn:\n          parseInt(blackData.minutes) > 0\n            ? parseInt(blackData.minutes * 60)\n            : 0,\n        sc: parseInt(blackData.seconds) > 0 ? parseInt(blackData.seconds) : 0,\n      },\n    };\n\n    let countWhite = count.white;\n    let countBlack = count.black;\n\n    let whiteTotalSeconds = countWhite.hr + countWhite.mn + countWhite.sc;\n    let blackTotalSeconds = countBlack.hr + countBlack.mn + countBlack.sc;\n\n    setTotalSeconds({\n      ...totalSeconds,\n      white: whiteTotalSeconds,\n      black: blackTotalSeconds,\n    });\n  };\n\n  const timerChangerHandler = (e) => {\n    let target = e.target;\n    if (target.dataset.color === 'white') {\n      if (target.dataset.type === 'hr') {\n        if (target.value.length <= 2) {\n          whiteData.hours.length < target.value.length\n            ? setDataWatch({ ...dataWatch, white: true })\n            : whiteData.minutes.length > 0 || whiteData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setWhiteData({ ...whiteData, hours: `${target.value}` });\n        }\n      } else if (target.dataset.type === 'mn') {\n        if (target.value.length <= 2) {\n          whiteData.minutes.length < target.value.length\n            ? setDataWatch({ ...dataWatch, white: true })\n            : whiteData.hours.length > 0 || whiteData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setWhiteData({ ...whiteData, minutes: `${target.value}` });\n        }\n      } else {\n        if (target.value.length <= 2) {\n          whiteData.seconds.length < target.value.length\n            ? setDataWatch({ ...dataWatch, white: true })\n            : whiteData.hours.length > 0 || whiteData.minutes.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setWhiteData({ ...whiteData, seconds: `${target.value}` });\n        }\n      }\n    } else if (target.dataset.color === 'black') {\n      if (target.dataset.type === 'hr') {\n        if (target.value.length <= 2) {\n          blackData.hours.length < target.value.length\n            ? setDataWatch({ ...dataWatch, black: true })\n            : blackData.minutes.length > 0 || blackData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setBlackData({ ...blackData, hours: `${target.value}` });\n        }\n      } else if (target.dataset.type === 'mn') {\n        if (target.value.length <= 2) {\n          blackData.minutes.length < target.value.length\n            ? setDataWatch({ ...dataWatch, black: true })\n            : blackData.hours.length > 0 || blackData.seconds.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setBlackData({ ...blackData, minutes: `${target.value}` });\n        }\n      } else {\n        if (target.value.length <= 2) {\n          blackData.seconds.length < target.value.length\n            ? setDataWatch({ ...dataWatch, black: true })\n            : blackData.hours.length > 0 || blackData.minutes.length > 0\n            ? setDataWatch({ ...dataWatch, black: true })\n            : setDataWatch({ ...dataWatch, black: false });\n          setBlackData({ ...blackData, seconds: `${target.value}` });\n        }\n      }\n    }\n\n    addPrefixToInput(target);\n  };\n\n  const resetTimer = () => {\n    setWhiteData({ hours: ``, minutes: ``, seconds: `` });\n    setBlackData({ hours: ``, minutes: ``, seconds: `` });\n  };\n\n  const addPrefixToInput = (e) => {\n    let originalInput = e.value;\n    let dataSetColor = e.dataset.color;\n    let dataSetType = e.dataset.type;\n    // console.table([e.value.length, originalInput]);\n\n    if (e.value.length <= 2) {\n      dataSetColor == 'black'\n        ? dataSetType == 'hr'\n          ? setBlackData({ ...blackData, hours: `0${originalInput}` })\n          : dataSetType == 'mn'\n          ? setBlackData({ ...blackData, minutes: `0${originalInput}` })\n          : setBlackData({ ...blackData, seconds: `0${originalInput}` })\n        : dataSetType == 'hr'\n        ? setWhiteData({ ...whiteData, hours: `0${originalInput}` })\n        : dataSetType == 'mn'\n        ? setWhiteData({ ...whiteData, minutes: `0${originalInput}` })\n        : setWhiteData({ ...whiteData, seconds: `0${originalInput}` });\n    } else if (e.value.length === 3) {\n      let modifiedinput = originalInput.split('').slice(1).join('');\n\n      dataSetColor == 'black'\n        ? dataSetType == 'hr'\n          ? setBlackData({ ...blackData, hours: `${modifiedinput}` })\n          : dataSetType == 'mn'\n          ? setBlackData({ ...blackData, minutes: `${modifiedinput}` })\n          : setBlackData({ ...blackData, seconds: `${modifiedinput}` })\n        : dataSetType == 'hr'\n        ? setWhiteData({ ...whiteData, hours: `${modifiedinput}` })\n        : dataSetType == 'mn'\n        ? setWhiteData({ ...whiteData, minutes: `${modifiedinput}` })\n        : setWhiteData({ ...whiteData, seconds: `${modifiedinput}` });\n    }\n  };\n\n  let [whiteData, setWhiteData] = useState({\n    hours: '',\n    minutes: '',\n    seconds: '',\n    totalSeconds: 0,\n  });\n  let [blackData, setBlackData] = useState({\n    hours: '',\n    minutes: '',\n    seconds: '',\n    totalSeconds: 0,\n  });\n  let [currentlyPlaying, setCurrentlyPlaying] = useState(false);\n  let [gameStarted, setGameStarted] = useState(false);\n  let [gameSet, setGameSet] = useState(false);\n  let [dataWatch, setDataWatch] = useState({\n    white: false,\n    black: false,\n  });\n  let [whoIsPlaying, setWhoIsPlaying] = useState('');\n  let [totalSeconds, setTotalSeconds] = useState({\n    white: 0,\n    black: 0,\n  });\n\n  return (\n    <div id='app' onKeyDown={changePlayer} tabIndex={0}>\n      <div className='desktop'>\n        <header>\n          <div className='logo'>chessly</div>\n          <p>Countdown timer for chess</p>\n        </header>\n        <section className='content'>\n          <div className='timer'>\n            <div className='timerOne'>\n              <div className='label'>white</div>\n              {/* <div className='editTimer'></div> */}\n              <form>\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='white'\n                  data-type='hr'\n                  value={whiteData.hours}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='white'\n                  data-type='mn'\n                  value={whiteData.minutes}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='white'\n                  data-type='sc'\n                  value={whiteData.seconds}\n                />\n              </form>\n            </div>\n\n            <div className='timerTwo'>\n              <div className='label'>Black</div>\n              <div className='editTimer'></div>\n              <form>\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='black'\n                  data-type='hr'\n                  value={blackData.hours}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='black'\n                  data-type='mn'\n                  value={blackData.minutes}\n                />\n                :\n                <input\n                  onChange={timerChangerHandler}\n                  type='number'\n                  placeholder='00'\n                  min='0'\n                  max='99'\n                  data-color='black'\n                  data-type='sc'\n                  value={blackData.seconds}\n                />\n              </form>\n            </div>\n          </div>\n\n          <div className='controls'>\n            <div className='switches'>\n              <div\n                onClick={changePlayer}\n                className='white'\n                style={{ opacity: `${whoIsPlaying === 'white' ? '1' : '0.3'}` }}\n              >\n                W\n              </div>\n              <div\n                onClick={changePlayer}\n                className='black'\n                style={{ opacity: `${whoIsPlaying === 'black' ? '1' : '0.3'}` }}\n              >\n                B\n              </div>\n            </div>\n            <div\n              className={\n                dataWatch.white && dataWatch.black ? 'start' : 'startDull'\n              }\n              style={{\n                opacity: `${dataWatch.white && dataWatch.black ? '1' : '0.3'}`,\n                cursor: `${\n                  dataWatch.white && dataWatch.black ? 'pointer' : 'not-allowed'\n                }`,\n              }}\n              onClick={\n                dataWatch.white && dataWatch.black ? startCountDown : () => {}\n              }\n            >\n              Start Game\n            </div>\n            <div id='breaker'></div>\n            {/* This div helps create a break between the div before and after */}\n            <div\n              className={`${\n                dataWatch.white || dataWatch.white ? 'reset' : 'resetDull'\n              }`}\n              style={{\n                opacity: `${\n                  whiteData.hours\n                    ? '1'\n                    : whiteData.minutes\n                    ? '1'\n                    : whiteData.seconds\n                    ? '1'\n                    : '0.3'\n                }`,\n                cursor: `${\n                  whiteData.hours\n                    ? 'pointer'\n                    : whiteData.minutes\n                    ? 'pointer'\n                    : whiteData.seconds\n                    ? 'pointer'\n                    : 'not-allowed'\n                }`,\n              }}\n              onClick={resetTimer}\n            >\n              Reset\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <div className='mobile'>\n        <div className='blackSide'>\n          <div className='mobileBlackSwitch'>B</div>\n          <div className='timerDetails'>\n            <form action=''>\n              <input type='tel' name='' id='' placeholder='00' />:\n              <input type='tel' name='' id='' placeholder='00' />:\n              <input type='tel' name='' id='' placeholder='00' />\n            </form>\n          </div>\n        </div>\n        <div className='controls'></div>\n        <div className='whiteSide'>\n          <div className='mobileWhiteSwitch'>W</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Timer;\n","/Users/2017pro/Documents/chess-timer/src/reportWebVitals.js",[],"/Users/2017pro/Documents/chess-timer/src/App.js",["34"],"/Users/2017pro/Documents/chess-timer/src/index.js",[],{"ruleId":"35","severity":1,"message":"36","line":16,"column":11,"nodeType":"37","messageId":"38","endLine":16,"endColumn":24},{"ruleId":"39","severity":1,"message":"40","line":148,"column":20,"nodeType":"41","messageId":"42","endLine":148,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":149,"column":23,"nodeType":"41","messageId":"42","endLine":149,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":151,"column":25,"nodeType":"41","messageId":"42","endLine":151,"endColumn":27},{"ruleId":"39","severity":1,"message":"40","line":154,"column":23,"nodeType":"41","messageId":"42","endLine":154,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":156,"column":23,"nodeType":"41","messageId":"42","endLine":156,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":162,"column":20,"nodeType":"41","messageId":"42","endLine":162,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":163,"column":23,"nodeType":"41","messageId":"42","endLine":163,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":165,"column":25,"nodeType":"41","messageId":"42","endLine":165,"endColumn":27},{"ruleId":"39","severity":1,"message":"40","line":168,"column":23,"nodeType":"41","messageId":"42","endLine":168,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":170,"column":23,"nodeType":"41","messageId":"42","endLine":170,"endColumn":25},{"ruleId":"35","severity":1,"message":"43","line":188,"column":8,"nodeType":"37","messageId":"38","endLine":188,"endColumn":24},{"ruleId":"35","severity":1,"message":"44","line":188,"column":26,"nodeType":"37","messageId":"38","endLine":188,"endColumn":45},{"ruleId":"35","severity":1,"message":"45","line":190,"column":8,"nodeType":"37","messageId":"38","endLine":190,"endColumn":15},{"ruleId":"35","severity":1,"message":"46","line":190,"column":17,"nodeType":"37","messageId":"38","endLine":190,"endColumn":27},{"ruleId":"35","severity":1,"message":"47","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},"no-unused-vars","'countForBlack' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'currentlyPlaying' is assigned a value but never used.","'setCurrentlyPlaying' is assigned a value but never used.","'gameSet' is assigned a value but never used.","'setGameSet' is assigned a value but never used.","'logo' is defined but never used."]